// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-calendar-api/ocp-calendar-api.proto

package ocp_calendar_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateCalendarRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateCalendarRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetType() <= 0 {
		return CreateCalendarRequestV1ValidationError{
			field:  "Type",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// CreateCalendarRequestV1ValidationError is the validation error returned by
// CreateCalendarRequestV1.Validate if the designated constraints aren't met.
type CreateCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarRequestV1ValidationError) ErrorName() string {
	return "CreateCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarRequestV1ValidationError{}

// Validate checks the field values on MultiCreateCalendarRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateCalendarRequestV1ValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateCalendarRequestV1ValidationError is the validation error returned
// by MultiCreateCalendarRequestV1.Validate if the designated constraints
// aren't met.
type MultiCreateCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateCalendarRequestV1ValidationError) ErrorName() string {
	return "MultiCreateCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateCalendarRequestV1ValidationError{}

// Validate checks the field values on UpdateCalendarRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateCalendarRequestV1ValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdateCalendarRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetType() <= 0 {
		return UpdateCalendarRequestV1ValidationError{
			field:  "Type",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// UpdateCalendarRequestV1ValidationError is the validation error returned by
// UpdateCalendarRequestV1.Validate if the designated constraints aren't met.
type UpdateCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCalendarRequestV1ValidationError) ErrorName() string {
	return "UpdateCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCalendarRequestV1ValidationError{}

// Validate checks the field values on DescribeCalendarRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DescribeCalendarRequestV1ValidationError is the validation error returned by
// DescribeCalendarRequestV1.Validate if the designated constraints aren't met.
type DescribeCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCalendarRequestV1ValidationError) ErrorName() string {
	return "DescribeCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCalendarRequestV1ValidationError{}

// Validate checks the field values on DescribeCalendarResponseV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCalendarResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Link

	return nil
}

// DescribeCalendarResponseV1ValidationError is the validation error returned
// by DescribeCalendarResponseV1.Validate if the designated constraints aren't met.
type DescribeCalendarResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCalendarResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCalendarResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCalendarResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCalendarResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCalendarResponseV1ValidationError) ErrorName() string {
	return "DescribeCalendarResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCalendarResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCalendarResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCalendarResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCalendarResponseV1ValidationError{}

// Validate checks the field values on ListCalendarRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for UserId

	// no validation rules for Type

	return nil
}

// ListCalendarRequestV1ValidationError is the validation error returned by
// ListCalendarRequestV1.Validate if the designated constraints aren't met.
type ListCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarRequestV1ValidationError) ErrorName() string {
	return "ListCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarRequestV1ValidationError{}

// Validate checks the field values on ListCalendarResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCalendarResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarResponseV1ValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCalendarResponseV1ValidationError is the validation error returned by
// ListCalendarResponseV1.Validate if the designated constraints aren't met.
type ListCalendarResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarResponseV1ValidationError) ErrorName() string {
	return "ListCalendarResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarResponseV1ValidationError{}

// Validate checks the field values on RemoveCalendarRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCalendarRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemoveCalendarRequestV1ValidationError is the validation error returned by
// RemoveCalendarRequestV1.Validate if the designated constraints aren't met.
type RemoveCalendarRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCalendarRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCalendarRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCalendarRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCalendarRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCalendarRequestV1ValidationError) ErrorName() string {
	return "RemoveCalendarRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCalendarRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCalendarRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCalendarRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCalendarRequestV1ValidationError{}
